# -*- coding: utf-8 -*-
"""movie_recommend_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TFSTddVyvdfM6Kxbx38mM0u-qk1Z-bYl
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.model_selection import train_test_split
#đưa file csv vào dataframe
movie_data = pd.read_csv('movies.csv')
#in ra 5 dòng đầu của file
movie_data.head()

row_columns = movie_data.shape
print(row_columns)
row = row_columns[0]

type(row_columns)
#đưa ra số đối tượng trống cho mỗi cột
movie_data.isnull().sum()
#chọn ra 5 thuộc tính quan trọng để dùng dự đoán
vital_feature = ['genres','keywords','tagline','cast','director'];

movie_data_select = movie_data[vital_feature]

movie_data_select.shape
#đưa ra số lượng các giá trị là null trong dataset
movie_data_select.isnull().sum()
#thay thế tất cả các giá trị null value với string rỗng
movie_data_select = movie_data_select.fillna('')

#movie_data_select.isnull().sum()
#combine tất cả các feature được chọn của mỗi phim vào 1 string
movie_data_combine = ''
for i in vital_feature:
  movie_data_combine= movie_data_combine +" "+ movie_data_select[i]

print(movie_data_combine)

print(movie_data_combine[0])

from gensim.parsing.preprocessing import remove_stopwords;
#chuyển all thành lowercase và loại bỏ stopword không cần thiết như a, an, the, he, she, it
for i in range(row):
  movie_data_combine[i] = movie_data_combine[i].lower()
  movie_data_combine[i] = remove_stopwords(movie_data_combine[i])

print(movie_data_combine)

print(movie_data_combine[0])

import string
#loại bỏ all dấu câu không cần thiết
for i in range(row):
  movie_data_combine[i]= movie_data_combine[i].translate(str.maketrans("","",string.punctuation))

print(movie_data_combine[0])
#chuyển tất cả các đoạn string thành vector đặc trưng sử dụng tf-idf
movie_data_num = TfidfVectorizer().fit_transform(movie_data_combine)

print(movie_data_num[0])
#tính toán độ tương đồng giữa các bộ phim trong tập dataset
similarity_movie_score = cosine_similarity(movie_data_num)

name_all_movie = movie_data['title'];
print(name_all_movie)
type(name_all_movie)
#nhập bộ phim mà người dùng thích
import difflib;

name_movie_love = input("enter the name of movie that you like: ");
name_movie_love = difflib.get_close_matches(name_movie_love,name_all_movie)[0];
print(name_movie_love)

"""caculate the index of this movie in dataframe"""

def index_movie(x):#x is name of the movie that you need to find
  i = 0;
  for name_movie in name_all_movie:
    if(name_movie == x):
      return i;
    i = i+1;

x = index_movie(name_movie_love)
print(x)
#tạo một list, mỗi phần tử trong list là một tuple chứa tên bộ phim và độ tương đồng giữa bộ phim đó với bộ phim mà người dùng nhập
name_score = ();
list_name_score = [];
type(list_name_score)
for i in range(row):
 list_name_score.append((movie_data['title'][i],similarity_movie_score[x][i]));

print(list_name_score)

"""sort_decrease"""
#sắp xếp danh sách các bộ phim theo thứ tự giảm dần về độ tương đồng
def buble_sort(x):
    t = True;
    while(t):
        t = False;
        for i in range(4802):
            if(x[i][1]<x[i+1][1]):
                k = x[i];
                x[i]=x[i+1];
                x[i+1] = k;
                t = True;
buble_sort(list_name_score);



print(list_name_score)
#đưa ra 10 bộ phim mà có sự tương đồng lớn nhất với bộ phim mà người dùng nhập

print("********************SOME OF THE MOVIE THAT WE SUGGEST************************")
movie_recommend = [];
for i in range(1,11):
  movie_recommend.append(list_name_score[i][0])
for i in movie_recommend:
  print(i)