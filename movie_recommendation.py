# -*- coding: utf-8 -*-
"""movie recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14pqvPL01P5jU7GAW4B6ETrZQmOiOByp2
"""



import numpy as np
import pandas as pd
import difflib#find the name if the input is wrong spelling
from sklearn.feature_extraction.text import TfidfVectorizer;
from sklearn.metrics.pairwise import cosine_similarity

"""data collection and pre-processing"""

movie_data = pd.read_csv('/content/movies (1).csv')

movie_data.head()

max = 0;
movie_name = '';
t = -1;
for i in movie_data['popularity']:
  t  = t+1;
  if(float(i)>max):
    max = float(i);
    movie_name = movie_data['original_title'][t];
print(movie_name);
print(max)

movie_data.shape #number of row and collumns in data frame

print(movie_data.isnull().sum())

"""sellecting the columns for recommendation"""

feature_selection = ['genres','keywords','tagline','cast','director']

for feature in feature_selection:
  movie_data[feature]= movie_data[feature].fillna('');#replace all the missing value with null string

print(movie_data.isnull().sum())

"""combining all the file selected feature

"""

combined_feature_df = movie_data[feature_selection]
combined_feature_df.head()

combined_feature = ''
for feature in combined_feature_df:
  combined_feature = combined_feature +" " +combined_feature_df[feature];
print(combined_feature)

type(combined_feature)

"""converting the text to numerical values"""

vectorizer = TfidfVectorizer()

feature_vector = vectorizer.fit_transform(combined_feature);
print(feature_vector)

"""cosine similarity"""

#getting the similarity score using cosine similarity

similarity = cosine_similarity(feature_vector)

print(similarity)

from google.colab import drive
drive.mount('/content/drive')

similarity.shape

movie_name = input("enter your favourite movie name: ");

"""creating the list with all the movie recommend"""

list_film = movie_data['title'].tolist();
print(list_film)

"""finding the closest match in the list movie"""

find_close_match = difflib.get_close_matches(movie_name, list_film)
print(find_close_match)
print(movie_name)

close_match = find_close_match[0];
print(close_match)

"""find the index of the movie with title"""

dem = -1;
for i in movie_data['title']:
  dem = dem +1;
  if(i == close_match):
    break;
print(dem)

list_similarity_score = [];
for i in range(0,4803):
  s = (i,similarity[i][dem]);
  list_similarity_score.append(s);
print(list_similarity_score)

t = True;
while t:
  t = False;
  for i in range(0,4802):
    if(list_similarity_score[i][1]<list_similarity_score[i+1][1]):
      k = list_similarity_score[i];
      list_similarity_score[i]=list_similarity_score[i+1];
      list_similarity_score[i+1] = k;
      t = True;
print(list_similarity_score)

movie_data.loc[1304]

for i in range(1,11):
  print(movie_data['title'][list_similarity_score[i][0]]);

"""print the recommend movie"""

list_recommend = [];
i = 10;
for movie in list_similarity_score:
  
  if(i>0):
    print(i)
    if(movie[0]!=dem):
      i = i-1;
      list_recommend.append(movie_data['title'][movie[0]]);
    
print(list_recommend)

list_recommend = [];
for movie in list_similarity_score:
  print(movie[0])
print(list_recommend)
print("mai dinh cong")